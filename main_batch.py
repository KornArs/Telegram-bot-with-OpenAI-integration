import os
import time
import json
import threading
from datetime import datetime
from typing import Dict, List, Set, Optional
from collections import defaultdict

import httpx
from flask import Flask, request, jsonify
from dotenv import load_dotenv

from debounce import DebounceManager

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
DEBOUNCE_SECONDS = int(os.getenv('DEBOUNCE_SECONDS', 4))
MAX_WAIT_SECONDS = int(os.getenv('MAX_WAIT_SECONDS', 15))
MAKE_WEBHOOK_URL = os.getenv('MAKE_WEBHOOK_URL')
BATCH_TIMEOUT = 10  # —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
last_update_id = 0
processed_updates: Set[int] = set()
message_batches = defaultdict(list)  # user_id -> [messages]
batch_timers: Dict[int, threading.Timer] = {}
paid_invoices: Set[str] = set()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –∏ DebounceManager
app = Flask(__name__)
debounce_manager = DebounceManager(
    debounce_seconds=DEBOUNCE_SECONDS,
    max_wait_seconds=MAX_WAIT_SECONDS
)

def get_timestamp() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS"""
    return datetime.now().strftime("%H:%M:%S")

def send_typing_action(user_id: int, chat_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendChatAction"
        data = {
            'chat_id': chat_id,
            'action': 'typing'
        }
        
        with httpx.Client() as client:
            response = client.post(url, json=data, timeout=5.0)
            if response.status_code != 200:
                print(f"[{get_timestamp()}] Error sending typing action: {response.text}")
                
    except Exception as e:
        print(f"[{get_timestamp()}] Error sending typing action: {e}")

def send_message_to_user(chat_id: int, text: str, parse_mode: str = 'HTML') -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': parse_mode
        }
        
        with httpx.Client() as client:
            response = client.post(url, json=data, timeout=5.0)
            if response.status_code != 200:
                print(f"[{get_timestamp()}] Error sending message: {response.text}")
                
    except Exception as e:
        print(f"[{get_timestamp()}] Error sending message: {e}")

def send_batch_to_make(user_id: int, messages: List[Dict]) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞—Ç—á —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Make.com"""
    try:
        payload = {
            'event_type': 'message_batch',
            'user_id': user_id,
            'messages': messages,
            'batch_size': len(messages),
            'timestamp': datetime.now().isoformat()
        }
        
        with httpx.Client(verify=False) as client:
            response = client.post(MAKE_WEBHOOK_URL, json=payload, timeout=10.0)
            print(f"[{get_timestamp()}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–∞—Ç—á –≤ Make: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {user_id}")
            
    except Exception as e:
        print(f"[{get_timestamp()}] Error sending batch to Make: {e}")

def start_typing_simulation(user_id: int, messages: List[Dict]) -> None:
    """–≠–º—É–ª–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞"""
    def typing_cycle():
        try:
            # –ü–µ—Ä–≤—ã–π —Ü–∏–∫–ª –Ω–∞–±–æ—Ä–∞ (3 —Å–µ–∫)
            send_typing_action(user_id, messages[0]['chat']['id'])
            time.sleep(3)
            
            # –ü–∞—É–∑–∞ (2 —Å–µ–∫)
            time.sleep(2)
            
            # –í—Ç–æ—Ä–æ–π —Ü–∏–∫–ª –Ω–∞–±–æ—Ä–∞ (2 —Å–µ–∫)
            send_typing_action(user_id, messages[0]['chat']['id'])
            time.sleep(2)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            response_text = f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π"
            send_message_to_user(messages[0]['chat']['id'], response_text)
            
        except Exception as e:
            print(f"[{get_timestamp()}] Error in typing simulation: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    typing_thread = threading.Thread(target=typing_cycle, daemon=True)
    typing_thread.start()

def process_batch(user_id: int) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in message_batches and message_batches[user_id]:
        messages = message_batches[user_id].copy()
        message_batches[user_id].clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Make
        send_batch_to_make(user_id, messages)
        
        # –≠–º—É–ª–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
        start_typing_simulation(user_id, messages)
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
        if user_id in batch_timers:
            del batch_timers[user_id]

def schedule_batch_processing(user_id: int, delay: int = BATCH_TIMEOUT) -> None:
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_id in batch_timers:
        batch_timers[user_id].cancel()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    timer = threading.Timer(delay, process_batch, args=[user_id])
    timer.start()
    batch_timers[user_id] = timer

def handle_message(message: Dict) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = message['from']['id']
    chat_id = message['chat']['id']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Ñ–ª—É–¥–∞
    if not debounce_manager.should_process(user_id):
        print(f"[{get_timestamp()}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ (debounce)")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞—Ç—á
    message_batches[user_id].append(message)
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞
    schedule_batch_processing(user_id)
    
    print(f"[{get_timestamp()}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞—Ç—á")

def handle_pre_checkout_query(pre_checkout_query: Dict) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç pre_checkout_query –æ—Ç Telegram Payments"""
    query_id = pre_checkout_query['id']
    invoice_payload = pre_checkout_query.get('invoice_payload', '')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞
    if invoice_payload in paid_invoices:
        answer_pre_checkout_query(query_id, False)
        return
    
    answer_pre_checkout_query(query_id, True)

def answer_pre_checkout_query(query_id: str, ok: bool) -> None:
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ pre_checkout_query"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerPreCheckoutQuery"
        data = {
            'pre_checkout_query_id': query_id,
            'ok': ok
        }
        
        with httpx.Client() as client:
            response = client.post(url, json=data, timeout=5.0)
            if response.status_code != 200:
                print(f"[{get_timestamp()}] Error answering pre_checkout_query: {response.text}")
                
    except Exception as e:
        print(f"[{get_timestamp()}] Error answering pre_checkout_query: {e}")

def handle_successful_payment(successful_payment: Dict) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
    invoice_payload = successful_payment.get('invoice_payload', '')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö
    paid_invoices.add(invoice_payload)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    notify_admin(successful_payment)
    
    # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –≤ Make
    proxy_to_make('payment', successful_payment)

def notify_admin(payment_data: Dict) -> None:
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø–ª–∞—Ç–µ–∂–µ"""
    try:
        order_info = payment_data.get('order_info', {})
        message = f"""‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞!
üí∞ –°—É–º–º–∞: {payment_data['total_amount'] / 100} ‚ÇΩ
üë§ –ò–º—è: {order_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_info.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}"""
        
        send_message_to_user(int(ADMIN_CHAT_ID), message)
        
    except Exception as e:
        print(f"[{get_timestamp()}] Error notifying admin: {e}")

def proxy_to_make(event_type: str, data: Dict) -> None:
    """–ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Make.com"""
    try:
        payload = {
            'event_type': event_type,
            'data': data,
            'timestamp': datetime.now().isoformat()
        }
        
        with httpx.Client(verify=False) as client:
            response = client.post(MAKE_WEBHOOK_URL, json=payload, timeout=10.0)
            print(f"[{get_timestamp()}] –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –≤ Make: {event_type}")
            
    except Exception as e:
        print(f"[{get_timestamp()}] Error proxying to Make: {e}")

def process_update(update: Dict) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram"""
    update_id = update.get('update_id', 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    if update_id in processed_updates:
        return
    
    processed_updates.add(update_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if 'message' in update:
        handle_message(update['message'])
    elif 'pre_checkout_query' in update:
        handle_pre_checkout_query(update['pre_checkout_query'])
    elif 'successful_payment' in update:
        handle_successful_payment(update['successful_payment'])

def polling_worker() -> None:
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram API"""
    global last_update_id
    
    while True:
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
            params = {
                'offset': last_update_id + 1,
                'timeout': 30,
                'limit': 100
            }
            
            with httpx.Client() as client:
                response = client.get(url, params=params, timeout=35.0)
                data = response.json()
                
                if data.get('ok') and data.get('result'):
                    for update in data['result']:
                        process_update(update)
                        last_update_id = max(last_update_id, update.get('update_id', 0))
                        
        except Exception as e:
            print(f"[{get_timestamp()}] Error in polling worker: {e}")
            time.sleep(5)

@app.route('/', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'ok',
        'last_update_id': last_update_id,
        'active_batches': len(message_batches),
        'batch_timers': len(batch_timers),
        'active_users': debounce_manager.get_active_users_count(),
        'timestamp': datetime.now().isoformat()
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook endpoint –¥–ª—è Telegram"""
    try:
        data = request.get_json()
        if data:
            process_update(data)
        return jsonify({'status': 'ok'})
    except Exception as e:
        print(f"[{get_timestamp()}] Error in webhook: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    polling_thread = threading.Thread(target=polling_worker, daemon=True)
    polling_thread.start()
    
    print(f"[{get_timestamp()}] Telegram bot started")
    print(f"[{get_timestamp()}] Health check: http://localhost:5000/")
    
    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
    app.run(
        debug=os.getenv('DEBUG', 'False').lower() == 'true',
        host=os.getenv('HOST', '0.0.0.0'),
        port=int(os.getenv('PORT', 5000))
    )
